{"version":3,"sources":["serviceWorker.ts","Components/BingoCard/index.js","Components/BingoCard/BingoCard.tsx","Components/BingoWrapper/index.js","Components/BingoWrapper/BingoWrapper.tsx","Components/Bingo/index.js","Components/Bingo/Bingo.tsx","index.tsx","Components/BingoCard/styles.module.scss"],"names":["Boolean","window","location","hostname","match","BingoCard","text","placeholder","id","allowEditing","isEditing","isChecked","uuid","setEdit","setNotification","remove","Card","Content","Meta","className","styles","bingoCardMeta","onClick","copy","cursorCopy","Icon","name","color","Container","as","c","bingoCardContentSizing","checked","Input","value","onChange","e","target","onKeyDown","keyCode","editingTextPrevent","BingoWrapper","children","Group","centered","style","padding","margin","Bingo","useState","counter","setCounter","notify","toast","bingoPreset","toString","Array","fill","map","b","i","bingos","setBingos","removeBingo","filter","bingo","bingoId","params","console","log","MUTButton","fluid","autoClose","hideProgressBar","closeOnClick","Grid","stackable","columns","Column","width","maxWidth","marginTop","border","pointer","key","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.91c305b5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {BingoCard} from './BingoCard';\nexport default BingoCard;\n","import React from 'react';\nimport { BingoTemplate, BingoCardEditParams } from 'interfaces/BingoCard';\nimport copy from 'copy-to-clipboard';\nimport c from 'classnames';\n\nimport { Card, Input, Icon, Container } from 'semantic-ui-react'\n\nimport styles from './styles.module.scss'\n\ninterface Props extends BingoTemplate {\n    setEdit(id: string, options?: BingoCardEditParams): void\n    setNotification(text: string): void\n    remove(uuid: string): void\n}\n\nexport const BingoCard = ({\n    text,\n    placeholder,\n    id,\n    allowEditing,\n    isEditing,\n    isChecked,\n    uuid,\n    setEdit,\n    setNotification,\n    remove,\n}: Props) => {\n    const copyUuidOpenNotification = () => {\n        copy(uuid);\n        setNotification('Bingo card ID copied to clipboard');\n    }\n\n    const cardContentClick = () => {\n        allowEditing && !isEditing && setEdit(id, { isEditing: true, allowEditing: true });\n    }\n\n    return (\n        <Card>\n            <Card.Content >\n                <Card.Meta className={styles.bingoCardMeta}>\n                    <small onClick={copyUuidOpenNotification} className={styles.cursorCopy}><span>{uuid}</span></small>\n                    <span\n                        onClick={() => remove(uuid)}>\n                        <Icon name='delete' color='red' />\n                    </span>\n                    <span\n                        onClick={() =>\n                            setEdit(id, {\n                                isEditing: false,\n                                isChecked: !isChecked,\n                                allowEditing: !allowEditing\n                            })}>\n                        <Icon name='check' color={isChecked ? 'green' : 'grey'} />\n                    </span>\n                </Card.Meta>\n            </Card.Content>\n            <Card.Content\n                onClick={cardContentClick}>\n                <Container as=\"div\" className={c(styles.bingoCardContentSizing, { [styles.checked]: isChecked })}>\n                    {isEditing ?\n                        <Input\n                            placeholder={placeholder}\n                            value={text}\n                            onChange={(e: any) => setEdit(id, { text: e.target.value, isEditing: true })}\n                            onKeyDown={(e: any) => e.keyCode === 13 && setEdit(id, { isEditing: false })} />\n                        :\n                        <span className={c({ [styles.editingTextPrevent]: !allowEditing })}>{text || placeholder}</span>\n                    }\n                </Container>\n            </Card.Content>\n        </Card >\n\n    )\n}","import { BingoWrapper } from './BingoWrapper';\nexport default BingoWrapper;\n","import React from 'react';\nimport { Card } from 'semantic-ui-react';\n\ntype Props = {\n    children: any,\n}\n\nexport const BingoWrapper = ({ children }: Props) => {\n    return (\n        <Card.Group centered style={{ padding: 0, margin: 0 }}>\n            {children}\n        </Card.Group>\n    )\n};\n","import {Bingo} from './Bingo';\nexport default Bingo;","import React, { useState } from \"react\";\nimport \"./Bingo.css\";\nimport { v4 as uuid } from 'uuid';\nimport { BingoTemplate, BingoCardEditParams } from \"interfaces/BingoCard\";\n\nimport BingoCard from \"Components/BingoCard\";\nimport BingoWrapper from \"Components/BingoWrapper\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport { Container, Grid } from \"semantic-ui-react\";\nimport { MUTButton } from \"my-ui-toolkit\";\n\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport const Bingo = () => {\n    const [counter, setCounter] = useState<number>(0)\n    const notify = (text: string) => toast(text);\n\n    const bingoPreset: BingoTemplate = {\n        text: '',\n        placeholder: 'Edit Me',\n        id: counter.toString(),\n        isEditing: false,\n        isChecked: false,\n        allowEditing: true,\n        uuid: uuid(),\n    }\n\n    const debugBingos = Array(8)\n        .fill({})\n        .map(b => ({ ...bingoPreset, ...b, uuid: uuid() }))\n        .map((c, i) => ({ ...c, id: i.toString() }))\n\n    const [bingos, setBingos] = useState<BingoTemplate[]>(process.env.NODE_ENV === \"development\" ? debugBingos : [])\n\n\n    const addAndIncrement = (): void => {\n        setBingos([...bingos, bingoPreset]);\n        setCounter(counter + 1);\n    }\n\n    const removeBingo = (uuid: string): void => setBingos(bingos.filter(bingo => bingo.uuid !== uuid))\n\n    const setEdit = (bingoId: string, params: BingoCardEditParams = {}): void => {\n        setBingos(\n            bingos.map(bingo =>\n                bingo.id === bingoId ?\n                    {\n                        ...bingo,\n                        ...params,\n                    } : bingo\n            )\n        )\n    }\n    \n    console.log(MUTButton);\n\n    return (\n        <Container as=\"main\" fluid style={{ padding: \"15px 0\" }}>\n            <ToastContainer autoClose={2500} hideProgressBar closeOnClick />\n            <Grid stackable centered columns=\"2\" style={{ margin: 0 }}>\n                <Grid.Column width=\"2\" style={{ maxWidth: \"20vw\", marginTop: 12.25 }}>\n                    <MUTButton border pointer onClick={addAndIncrement}>Add Bingo Card</MUTButton>\n                </Grid.Column>\n                <Grid.Column width=\"14\" style={{ maxWidth: \"80vw\" }}>\n                    <BingoWrapper>\n                        {bingos.map(bingo =>\n                            <BingoCard\n                                key={bingo.id.toString()}\n                                setEdit={setEdit}\n                                setNotification={notify}\n                                remove={removeBingo}\n                                {...bingo} />\n                        )}\n                    </BingoWrapper>\n                </Grid.Column>\n            </Grid>\n        </Container>\n    )\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Bingo from 'Components/Bingo';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Bingo />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bingoCardMeta\":\"styles_bingoCardMeta__1giF6\",\"bingoCardContentSizing\":\"styles_bingoCardContentSizing__3C54X\",\"checked\":\"styles_checked__11VvI\",\"editingTextPrevent\":\"styles_editingTextPrevent__1bbcB\",\"cursorCopy\":\"styles_cursorCopy__3QFkK\"};"],"sourceRoot":""}